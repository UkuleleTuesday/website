name: Build, Test, and Deploy

permissions:
  id-token: write
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Run pre-commit hooks
        run: uvx pre-commit run --all-files
      - name: Build static site
        env:
          ENABLE_ANALYTICS: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        run: uv run build.py
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: public-site
          path: public/

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ['chromium', 'Android (Chrome, Pixel 7)', 'iOS (Mobile Safari, iPhone 13)']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: public-site
          path: public/
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm install -g pnpm && pnpm install
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright tests
        run: pnpm exec playwright test --project "${{ matrix.project }}"
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.project }}
          path: playwright-report/
          retention-days: 30

  deploy-preview:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: public-site
          path: public/
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      - name: Set Netlify Env Vars
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          netlify env:set WHATSAPP_JOIN_LINK "${{ secrets.WHATSAPP_JOIN_LINK }}" --context deploy-preview --secret
          netlify env:set WHATSAPP_JOIN_LINK "${{ secrets.WHATSAPP_JOIN_LINK }}" --context "branch:${{ github.head_ref }}" --secret
          netlify env:set BMC_URL "https://buymeacoffee.com/ukuleletuesday" --context deploy-preview
          netlify env:set BMC_URL "https://buymeacoffee.com/ukuleletuesday" --context "branch:${{ github.head_ref }}"
          netlify env:set BMC_DEFAULT_UTMS "utm_source=screen&utm_medium=qr&utm_campaign=donate" --context deploy-preview
          netlify env:set BMC_DEFAULT_UTMS "utm_source=screen&utm_medium=qr&utm_campaign=donate" --context "branch:${{ github.head_ref }}"
      - name: Set Netlify deployment arguments
        id: netlify_args
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Escape quotes in PR title
          PR_TITLE_ESCAPED=${PR_TITLE//\"/\\\"}
          DEPLOY_MESSAGE="Deploy preview for PR #${{ github.event.number }} - ${PR_TITLE_ESCAPED}"
          echo "deploy_args=deploy --dir=./public --message \"${DEPLOY_MESSAGE}\"" >> "$GITHUB_OUTPUT"
      - name: Deploy to Netlify
        id: netlify_deploy
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          DEPLOY_URL=$(netlify ${{ steps.netlify_args.outputs.deploy_args }} --json | jq -r '.deploy_url')
          echo "NETLIFY_URL=$DEPLOY_URL" >> $GITHUB_OUTPUT
      - name: Post Netlify preview link to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment_marker = "<!-- NETLIFY_PREVIEW_COMMENT -->";
            const previewUrl = `${{ steps.netlify_deploy.outputs.NETLIFY_URL }}`;
            const commentBody = `
              ${comment_marker}
              ## âœ… Netlify Deploy Preview Ready!
              You can view the live preview of your changes here:
              **[${previewUrl}](${previewUrl})**
              ---
              _Build logs are available in the [GitHub Actions summary](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})._
            `;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const existing_comment = comments.find(comment => comment.body.includes(comment_marker));
            if (existing_comment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing_comment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            }

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && github.event_name == 'push'"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: public-site
          path: public/
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      - name: Set Netlify Env Var for Production
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          netlify env:set WHATSAPP_JOIN_LINK "${{ secrets.WHATSAPP_JOIN_LINK }}" --context production --secret
          netlify env:set BMC_URL "https://buymeacoffee.com/ukuleletuesday" --context production
          netlify env:set BMC_DEFAULT_UTMS "utm_source=screen&utm_medium=qr&utm_campaign=donate" --context production
      - name: Set Netlify deployment arguments
        id: netlify_args
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%s) # %s gets only the subject line
          # Escape quotes and other special characters in commit message
          COMMIT_MSG_ESCAPED=${COMMIT_MSG//\"/\\\"}
          COMMIT_MSG_SANITIZED=$(echo "$COMMIT_MSG_ESCAPED" | sed "s/[^a-zA-Z0-9 :_.-]/ /g")
          DEPLOY_MESSAGE="Production deploy: ${COMMIT_MSG_SANITIZED}"
          echo "deploy_args=deploy --dir=./public --prod-if-unlocked --message \"${DEPLOY_MESSAGE}\"" >> "$GITHUB_OUTPUT"
      - name: Deploy to Netlify
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: netlify ${{ steps.netlify_args.outputs.deploy_args }}
