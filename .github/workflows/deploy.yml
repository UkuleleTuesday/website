name: Deploy Static Site to Netlify

permissions:
  id-token: write     # OIDC
  contents: read
  pull-requests: write

on:
  # Allow manual triggering
  workflow_dispatch:

  # Run on pushes to main branch
  push:
    branches: [ main ]

  # Run on pull requests
  pull_request:

jobs:
  deploy-to-netlify:
    runs-on: ubuntu-latest

    # Use a concurrency group to prevent multiple deployments running simultaneously
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout repository
      id: checkout
      uses: actions/checkout@v4

    - name: Install uv
      id: install_uv
      uses: astral-sh/setup-uv@v4

    - name: Run pre-commit hooks
      id: pre_commit
      run: uvx pre-commit run --all-files

    - name: Build static site
      id: build
      run: uv run build.py

    - name: Set Netlify deployment arguments
      id: netlify_args
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Escape quotes in PR title
          PR_TITLE_ESCAPED=${PR_TITLE//\"/\\\"}
          DEPLOY_MESSAGE="Deploy preview for PR #${{ github.event.number }} - ${PR_TITLE_ESCAPED}"
          echo "deploy_args=deploy --dir=./public --functions=./netlify/functions --message \"${DEPLOY_MESSAGE}\"" >> "$GITHUB_OUTPUT"
        else
          COMMIT_MSG=$(git log -1 --pretty=%s) # %s gets only the subject line
          # Escape quotes and other special characters in commit message
          COMMIT_MSG_ESCAPED=${COMMIT_MSG//\"/\\\"}
          COMMIT_MSG_SANITIZED=$(echo "$COMMIT_MSG_ESCAPED" | sed "s/[^a-zA-Z0-9 :_.-]/ /g")
          DEPLOY_MESSAGE="Production deploy: ${COMMIT_MSG_SANITIZED}"
          echo "deploy_args=deploy --dir=./public --functions=./netlify/functions --prod-if-unlocked --message \"${DEPLOY_MESSAGE}\"" >> "$GITHUB_OUTPUT"
        fi

    - name: Set Netlify Env Var for Production
      id: set_netlify_env_prod
      uses: netlify/actions/cli@master
      with:
        args: env:set WHATSAPP_JOIN_LINK "${{ secrets.WHATSAPP_JOIN_LINK }}" --context production --secret
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: Set Netlify Env Var for Deploy Previews
      id: set_netlify_env_preview
      uses: netlify/actions/cli@master
      with:
        args: env:set WHATSAPP_JOIN_LINK "${{ secrets.WHATSAPP_JOIN_LINK }}" --context deploy-preview --secret
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: Set Netlify Env Var for Branch Deploys
      id: set_netlify_env_branch
      if: github.event_name == 'pull_request'
      uses: netlify/actions/cli@master
      with:
        args: env:set WHATSAPP_JOIN_LINK "${{ secrets.WHATSAPP_JOIN_LINK }}" --context "branch:${{ github.head_ref }}" --secret
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: Deploy to Netlify
      id: netlify_deploy
      uses: netlify/actions/cli@master
      with:
        args: ${{ steps.netlify_args.outputs.deploy_args }}
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: Check Netlify deployment for errors
      id: check_deploy_errors
      if: contains(steps.netlify_deploy.outputs.NETLIFY_OUTPUT, 'Error:')
      run: |
        echo "Netlify deployment failed!"
        echo "${{ steps.netlify_deploy.outputs.NETLIFY_OUTPUT }}"
        exit 1

    - name: Post Netlify preview link to PR
      id: post_preview_link
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const comment_marker = "<!-- NETLIFY_PREVIEW_COMMENT -->";
          const previewUrl = `${{ steps.netlify_deploy.outputs.NETLIFY_URL }}`;
          const commentBody = `
            ${comment_marker}
            ## âœ… Netlify Deploy Preview Ready!

            You can view the live preview of your changes here:
            **[${previewUrl}](${previewUrl})**

            ---
            _Build logs are available in the [GitHub Actions summary](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})._
          `;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existing_comment = comments.find(comment => comment.body.includes(comment_marker));

          if (existing_comment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existing_comment.id,
              body: commentBody,
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
          }
